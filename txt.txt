func Redis(url string, productdata interface{})(*model.Data,error) {

	rdb := NewRedisClient()
	fmt.Println("redis client initialized")

	models,_:=service.ServiceGetRedisParam(url)

	key := url
	data := &model.Data{
		ID:    models.ID,
		Title: "",
		Price: 0,
		Stock: 0,
	}
	ttl := time.Duration(20) * time.Second

	// store data using SET command
	op1 := rdb.Set(key, data, ttl)
	if err := op1.Err(); err != nil {
		fmt.Printf("unable to SET data. error: %v", err)
		return nil,nil
	}
	log.Println("set operation success")

	return 

}

func Redis(url string, productdata interface{}) {

	rdb := NewRedisClient()
	fmt.Println("redis client initialized")

	key := url
	data := &model.ResponseProduct{
		Products: []struct{ID int "json:\"id\""; Title string "json:\"title\""; Description string "json:\"description\""; Price int "json:\"price\""; DiscountPercentage float64 "json:\"discountPercentage\""; Rating float64 "json:\"rating\""; Stock int "json:\"stock\""; Brand string "json:\"brand\""; Category string "json:\"category\""; Thumbnail string "json:\"thumbnail\""; Images []string "json:\"images\""}{},
	}
	ttl := time.Duration(20) * time.Second

	// store data using SET command
	op1 := rdb.Set(key, data, ttl)
	if err := op1.Err(); err != nil {
		fmt.Printf("unable to SET data. error: %v", err)
		return
	}
	log.Println("set operation success")

}